
<!--<p hidden id="ViewTimer"></p>-->
<script src="https://code.jquery.com/jquery-3.4.1.js"></script>
<!--<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.3.0/socket.io.js" ></script>-->
<div class="row" style="height: 50px"></div>
<h1>#<%= @room.id %> / <%= @room.title %></h1>
<p><%= @room.question.title %></p>
<hr>
<h5><%= @room.question.description %></h5>
<hr>
<p><%= t('rooms.playingRoom.text1') %> : <%= @room.questionNumber %></p>
<p><%= t('rooms.playingRoom.text2') %> : <%= @room.limitTime %></p>
<hr>
<button id="startButton" class="form-control btn btn-danger" onClick="startButtonClick()"><%= t('rooms.playingRoom.text3') %></button><br />
<button id="unmuteButton" class="form-control btn btn" ><%= t('rooms.playingRoom.text4') %></button>
<br />
<hr>
<div id="box" class="container overflow-auto" style="height: 300px">
  <div id="messages" class="alert alert-secondary" style="text-decoration: underline; overflow: auto;">
  </div>
</div>
<div class="margin-s10"></div>

<form onsubmit="return false">
  <div class="form-group">
    <input type="text" id="text" class="form-control form-control-lg margin-top-10"  placeholder= <%= t('rooms.playingRoom.text1') %>
    onkeydown = "if (event.keyCode == 13)
                        document.getElementById('sendButton').click()" >

  </div>
  <input type="button" id="sendButton" value="send" onclick="send()" class="form-control btn btn-dark">
</form>

<div class="row">
  <% @room.players.each do |player| %>
    <div class="col-sm-4 margin-top-10">
      <div class="card border-info overflow-auto">
        <div id="card" class="card-body">
          <h5 class="card-title"><%= player.user.nickName %></h5>
          <p id="<%= player.user.id %>" class="card-text float-right">0 Points</p>
        </div>
      </div>
    </div>
  <% end %>
</div>

<div hidden>
  <div id="player"></div>
</div>

<script>
    var player;
    var nowSong;
    var stArr;
    var url;
    var timeLimit = "<%= @room.limitTime %>";
    var socket = io.connect("http://34.67.110.223:4000");
    var nick = "<%=current_user.nickName%>";
    var score = 0;
    var currentId = "<%=current_user.id%>";
    var players = "<%=@players%>";
    var res = players.replace(/[\[\] ]/g, "").replace(/[^0-9]/g, ",");
    var result = res.split(",");
    var move = document.getElementById("box");
    var questionInfo = "<%= @room.question.title %>";
    var questionLimit = parseInt("<%= @room.questionNumber %>");
    var roomId = "<%= @room.id %>";
    var keyword;
    var answer;
    var index;
    var finishArray = [];

    const lang = window.location.pathname.split('/')[1];

    // 2. This code loads the IFrame Player API code asynchronously.
    var tag = document.createElement('script');

    tag.src = "https://www.youtube.com/iframe_api";
    var firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

    function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
            height: '360',
            width: '640',
            videoId: `${nowSong}`,
            playerVars: {
                //'start': stArr[0], // 여기 수정
                // 무한반복용 루프 설정도구. 복잡해서 뺐음
                'start': 1,
                'loop' : 1,
                'playlist': `${nowSong}`,
                //'end': parseInt(stArr[0]) + parseInt("<%= @room.limitTime %>")
                'end': 100
            },
            events: {
                'onReady': onPlayerReady,
                'onStateChange': onPlayerStateChange,
            }
        });
    }

    function onPlayerReady(event) {
        event.target.mute();
    }

    function onPlayerStateChange(event) {
        setTimeout(stopVideo, 4000);
    }
    function stopVideo() {
        player.unMute();
    }

    unmuteButton.addEventListener('click', function() {
        player.playVideo();
    });

    function sysMsg(text) {
        let sysInfo = document.createElement('div');
        sysInfo.classList.add('text-info');
        sysInfo.appendChild(document.createTextNode(text));
        messages.appendChild(sysInfo);
    }

    if(lang == "ko"){
      setTimeout(() => {
        sysMsg('[시스템메시지] : 3초 뒤에 시작됩니다.');
      }, 1000);

      setTimeout(() => {
        sysMsg('[시스템메시지] : 2초 뒤에 시작됩니다.');
      }, 2000);
      setTimeout(() => {
        sysMsg('[시스템메시지] : 1초 뒤에 시작됩니다.');
      }, 3000);

      setInterval(() => {
        timeLimit -= 1;
      }, 1000);
    }else{
      setTimeout(() => {
        sysMsg('[システムメッセージ] : 3秒後に始まります.');
      }, 1000);

      setTimeout(() => {
        sysMsg('[システムメッセージ] : 2秒後に始まります.');
      }, 2000);
      setTimeout(() => {
        sysMsg('[システムメッセージ] : 1秒後に始まります.');
      }, 3000);

      setInterval(() => {
        timeLimit -= 1;
      }, 1000);
    }
    

    window.addEventListener('beforeunload', (event) => {
      event.preventDefault();
      event.returnValue = '진짜 나감??';
    });

// Socket
    socket.emit('question',{
      questionInfo: questionInfo,
      roomId: roomId,
    });
    console.log(questionInfo);

    socket.emit('grating', {nick: nick, roomId: roomId});

    socket.on('grating', (data) => {
      var messages = document.getElementById('messages');
      var text;
      if(lang == "ko"){
        text = document.createTextNode(`${data}님이 입장하셨습니다.`);
        sysMsg(`${data}님이 입장하셨습니다!`);
      }else{
        text = document.createTextNode(`${data}様が入場しました.`);
        sysMsg(`${data}様が入場しました！`);
      }
    });

    const timer = setInterval(() => {
      index = parseInt(url.findIndex(i => i == nowSong));
      if(timeLimit < 0) {
        nowSong = url[index+1];
        setTimeout(() => {
            console.log(url[index]);
          player.loadVideoById({
            'videoId': url[index],
            'startSeconds': stArr[index],
            'endSeconds': parseInt(stArr[index]) + parseInt(timeLimit)
          });
        }, 4000);
        timeLimit = "<%= @room.limitTime %>";
        if(lang =="ko"){
          sysMsg(`제한시간이 초과되었습니다.`);
          setTimeout(() => {
            sysMsg('[시스템메시지] : 3초 뒤에 시작됩니다.');
            if(move.scrollHeight > 0) {
              move.scrollTop = move.scrollHeight;
            }//자동스크롤
          }, 1000);
          setTimeout(() => {
            sysMsg('[시스템메시지] : 2초 뒤에 시작됩니다.');
            if(move.scrollHeight > 0) {
              move.scrollTop = move.scrollHeight;
            }//자동스크롤
          }, 2000);
          setTimeout(() => {
            sysMsg('[시스템메시지] : 1초 뒤에 시작됩니다.');
            console.log('현재' + index);
            if(move.scrollHeight > 0) {
              move.scrollTop = move.scrollHeight;
            }//자동스크롤
          }, 3000);
        }else{
          sysMsg(`時間切れになりました.`);
          setTimeout(() => {
            sysMsg('[システムメッセージ] : 3秒後に始まります.');
            if(move.scrollHeight > 0) {
              move.scrollTop = move.scrollHeight;
            }//자동스크롤
          }, 1000);
          setTimeout(() => {
            sysMsg('[システムメッセージ] : 2秒後に始まります.');
            if(move.scrollHeight > 0) {
              move.scrollTop = move.scrollHeight;
            }//자동스크롤
          }, 2000);
          setTimeout(() => {
            sysMsg('[システムメッセージ] : 1秒後に始まります.');
            console.log('현재' + index);
            if(move.scrollHeight > 0) {
              move.scrollTop = move.scrollHeight;
            }//자동스크롤
          }, 3000);
        }
        
      }

      //시간초과되었을 때 다음으로 넘김
      if(index === questionLimit || index === stArr.length){
        function finish(){
          for(var i in result){
            var finishUser = document.getElementById(result[i]).innerHTML;
            var point = finishUser.split(" ")[0];
            finishArray.push({id: result[i], point: parseInt(point)});
          }
          var max = finishArray.reduce(function(prev, current) {
            return (prev.point > current.point) ? prev : current
          });
          if(lang == "ko"){
            alert("문제가 모두 끝났습니다!\n결과 창으로 이동합니다!");
          }else{
            alert("問題が終わりました！\n結果ページへ移動します！");
          }
          
          window.location.href = `/result/<%= @room.id %>/${max.id}`; // 우승자 id값
        }
        finish();

        clearInterval(timer);
      }//문제 다 풀면 리다이렉트
    }, 1000);

    function send() {
      var value = document.getElementById("text").value;
      var pi = url.findIndex(i => i == nowSong);
      socket.emit("sendUser", {
        value: value,
        nick: nick,
        id: currentId,
        i: pi,
        roomId: roomId,
        keyword: keyword,
        answer: answer
      });
      document.getElementById('text').value = null;
      //이벤트 발생하면 인풋태그 비우기
      var move = document.getElementById('box');
      if(move.scrollHeight > 0) {
        move.scrollTop = move.scrollHeight;
      }//자동스크롤

    }
    //채팅 전송 이벤트 발생
    socket.on("userInfo", (data) => {
      var messages = document.getElementById("messages");
      var text = document.createTextNode(`${data.nick} : ${data.value}`);
      messages.appendChild(text);
      messages.appendChild(document.createElement("br"));
      var move = document.getElementById('box');
      if(move.scrollHeight > 0) {
        move.scrollTop = move.scrollHeight;
      }//자동스크롤
      //채팅
      console.log(data.flag);
      if(data.flag === true){
        if(data.nick === nick) {
          document.getElementById(currentId).innerHTML = `${data.score} Points`;
        }else{
          var search = result.indexOf(data.id);
          document.getElementById(result[search]).innerHTML = `${data.score} Points`;
        }
        var pi = url.findIndex(i => i == nowSong);
        answer[pi] = 'YomiQuiZMaDeBYYOMIAndideA';
        keyword[pi] = {keyword:''};
        //스코어 변경
        sysMsg(`${data.nick}님 정답입니다!`);
        if(move.scrollHeight > 0) {
          move.scrollTop = move.scrollHeight;
        }//자동스크롤
      }
      //시스템메시지
    });

    ///초기 재생오류 해결
    setTimeout(() => {player.loadVideoById({
        'videoId': url[0],
        'startSeconds': stArr[0],
        'endSeconds': parseInt(stArr[0]) + parseInt(timeLimit)
    })},2000);

    //채팅 오갈때마다 검사
    async function socketFunction() {
      await new Promise(resolve => {
        socket.on('answer', (data) => {
          resolve(data);
          url = data.url;
          nowSong = data.url[0];
          stArr = data.startTime;
          keyword = data.keyword;
          answer = data.answer;
        });
      });
      player.loadVideoById({
        'videoId': url[0],
        'startSeconds': stArr[0],
        'endSeconds': parseInt(stArr[0]) + parseInt(timeLimit)
      });

    }

    document.addEventListener("DOMContentLoaded", socketFunction);
    document.addEventListener("DOMContentLoaded", () => {
      console.log("연결");
    });
    //시작할 시 문제정보 받음
    //더미버튼
    function startButtonClick() {
        var btn = document.getElementById("startButton");
        btn.style.display = "none";
    }

    //새로고침 방지

    function doNotReload(){
        if(    (event.ctrlKey == true && (event.keyCode == 78 || event.keyCode == 82))
            || (event.keyCode == 116) )
        {
            event.keyCode = 0;
            event.cancelBubble = true;
            event.returnValue = false;
            if(lang == "ko"){
              alert("게임중에는 새로고침을 하실 수 없어요");
            }else{
              alert('ゲーム中にはリロードできません');
            }
        }
    }
    document.onkeydown = doNotReload;
</script>
