<!--<p hidden id="ViewTimer"></p>-->

<!--<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.3.0/socket.io.js" ></script>-->
<div class="row" style="height: 50px"></div>
<h1>#<%= @room.id %> / <%= @room.title %></h1>
<p><%= @room.question.title %></p>
<hr>
<h5><%= @room.question.description %></h5>
<hr>
<p>문제 수 : <%= @room.questionNumber %></p>
<p>제한시간 : <%= @room.limitTime %></p>
<hr>
<button id="unmuteButton" class="form-control btn btn" >소리가 나오지 않는다면 이곳을 눌러주세요(다시재생 포함)</button>
<br />
<hr>
<div id="box" class="container overflow-auto" style="height: 300px">
  <div id="messages" class="alert alert-secondary" role="alert" style="text-decoration: underline; overflow: auto;">

  </div>
</div>
<div class="margin-s10"></div>

<form onsubmit="return false">
  <div class="form-group">
    <input type="text" id="text" class="form-control form-control-lg margin-top-10"  placeholder="이곳에 채팅을 입력하세요"
    onkeydown = "if (event.keyCode == 13)
                        document.getElementById('sendButton').click()" >

  </div>
  <input type="button" id="sendButton" value="send" onclick="send()" class="form-control btn btn-dark">
</form>

<div class="row">
  <% @room.players.each do |player| %>
    <div class="col-sm-4 margin-top-10">
      <div class="card border-info overflow-auto">
        <div id="card" class="card-body">
          <h5 class="card-title"><%= player.user.nickName %></h5>
    <!--      <h5 id="nick" class="card-title"></h5> -->
          <p id="<%= player.user.id %>" class="card-text float-right">0 Points</p>
        </div>
      </div>
    </div>
  <% end %>
</div>

<div hidden>
  <div id="player"></div>
</div>

<script>
    var player;
    var nowSong;
    var stArr;
    var url;
    var timeLimit = "<%= @room.limitTime %>";
    var socket = io.connect("http://3.88.111.248:4000");
    var nick = "<%=current_user.nickName%>";
    var score = 0;
    var currentId = "<%=current_user.id%>";
    var players = "<%=@players%>";
    var res = players.replace(/[^0-9]/g, "");
    var result = res.split("");
    var move = document.getElementById("box");
    var questionInfo = "<%= @room.question.title %>";
    var questionLimit = parseInt("<%= @room.questionNumber %>");
    var roomId = "<%= @room.id %>";
    var keyword;
    var answer;
    var index;

    // 2. This code loads the IFrame Player API code asynchronously.
    var tag = document.createElement('script');

    tag.src = "https://www.youtube.com/iframe_api";
    var firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

    // 3. This function creates an <iframe> (and YouTube player)
    //    after the API code downloads.

    function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
            height: '360',
            width: '640',
            videoId: `${nowSong}`,
            playerVars: {
                //'start': stArr[0], // 여기 수정
                // 무한반복용 루프 설정도구. 복잡해서 뺐음
                'start': 1,
                'loop' : 1,
                'playlist': `${nowSong}`,
                //'end': parseInt(stArr[0]) + parseInt("<%= @room.limitTime %>")
                'end': 100
            },
            events: {
                'onReady': onPlayerReady,
                'onStateChange': onPlayerStateChange,
            }
        });
    }

    // 4. The API will call this function when the video player is ready.
    function onPlayerReady(event) {
        event.target.mute();
        event.target.playVideo();
    }

    // 5. The API calls this function when the player's state changes.
    //    The function indicates that when playing a video (state=1),
    //    the player should play for six seconds and then stop.
    function onPlayerStateChange(event) {
        setTimeout(stopVideo, 4000);
    }
    function stopVideo() {
        player.unMute();
    }

    unmuteButton.addEventListener('click', function() {
        player.playVideo();
    });

    setTimeout(() => {
      messages.appendChild(document.createTextNode(`[시스템메시지] : 3초 뒤에 시작됩니다.`));
      messages.appendChild(document.createElement("br"));
    }, 1000);

    setTimeout(() => {
      messages.appendChild(document.createTextNode(`[시스템메시지] : 2초 뒤에 시작됩니다.`));
      messages.appendChild(document.createElement("br"));
    }, 2000);
    setTimeout(() => {
      messages.appendChild(document.createTextNode(`[시스템메시지] : 1초 뒤에 시작됩니다.`));
      messages.appendChild(document.createElement("br"));
    }, 3000);

    setInterval(() => {
      timeLimit -= 1;
    }, 1000);

    window.addEventListener('beforeunload', (event) => {
      event.preventDefault();
      event.returnValue = '진짜 나감??';
    });

// Socket
    socket.on('question', () => {
      socket.emit('question',{
        questionInfo: questionInfo,
        roomId: roomId,
      });
    });

    socket.emit('grating', nick);

    socket.on('grating', (data) => {
      var messages = document.getElementById('messages');
      var text = document.createTextNode(`${data}님이 입장하셨습니다.`);
      messages.appendChild(text);
      messages.appendChild(document.createElement("br"));
    });

    const timer = setInterval(() => {
      index = url.findIndex(i => i == nowSong);
      if(timeLimit < 0) {
        nowSong = url[index+1];
        setTimeout(() => {
          player.loadVideoById({
            'videoId': url[index+1],
            'startSeconds': stArr[index+1],
            'endSeconds': parseInt(stArr[index+1]) + parseInt(timeLimit)
          });
        }, 4000);
        timeLimit = "<%= @room.limitTime %>";
        messages.appendChild(document.createTextNode(`제한시간이 초과되었습니다!`));
        messages.appendChild(document.createElement("br"));
        setTimeout(() => {
          messages.appendChild(document.createTextNode(`[시스템메시지] : 3초 뒤에 시작됩니다.`));
          messages.appendChild(document.createElement("br"));
          if(move.scrollHeight > 0) {
            move.scrollTop = move.scrollHeight;
          }//자동스크롤
        }, 1000);
        setTimeout(() => {
          messages.appendChild(document.createTextNode(`[시스템메시지] : 2초 뒤에 시작됩니다.`));
          messages.appendChild(document.createElement("br"));
          if(move.scrollHeight > 0) {
            move.scrollTop = move.scrollHeight;
          }//자동스크롤
        }, 2000);
        setTimeout(() => {
          messages.appendChild(document.createTextNode(`[시스템메시지] : 1초 뒤에 시작됩니다.`));
          messages.appendChild(document.createElement("br"));
          if(move.scrollHeight > 0) {
            move.scrollTop = move.scrollHeight;
          }//자동스크롤
        }, 3000);
      }
      //시간초과되었을 때 다음으로 넘김
      if(index === questionLimit || index === stArr.length){
        alert("문제가 모두 끝났습니다!\n결과 창으로 이동합니다!");
        window.location.href = "/result/" + <%= @room.id %> + '/' +  1; // 우승자 id값
        clearInterval(timer);
        // for(var i in result){
        //   //
        // }
        //var winner_id = result의 Score값에서 Score가 가장 큰 result값을 찾음
        // jQuery.ajax({
        //   type: "POST",
        //   url: `http://localhost:3000/result/${roomId}`,
        //   data: {
        //     winner_id : , //request.body.res로 접근가능
        //   }
        // })
      }//문제 다 풀면 리다이렉트
    }, 1000);

    function send() {
      var value = document.getElementById("text").value;
      var pi = url.findIndex(i => i == nowSong);
      socket.emit("sendUser", {
        value: value,
        nick: nick,
        id: currentId,
        i: pi,
        roomId: roomId,
        keyword: keyword,
        answer: answer
      });
      document.getElementById('text').value = null;
      //이벤트 발생하면 인풋태그 비우기
      var move = document.getElementById('box');
      if(move.scrollHeight > 0) {
        move.scrollTop = move.scrollHeight;
      }//자동스크롤

    }
    //채팅 전송 이벤트 발생
    socket.on("userInfo", (data) => {
      var messages = document.getElementById("messages");
      var text = document.createTextNode(`${data.nick} : ${data.value}`);
      messages.appendChild(text);
      messages.appendChild(document.createElement("br"));
      //채팅
      if(data.flag === true){
        if(data.nick === nick) {
          document.getElementById(currentId).innerHTML = `${data.nick} - ${data.score}`;
        }else{
          var search = result.indexOf(data.id);
          document.getElementById(result[search]).innerHTML = `${data.nick} - ${data.score}`;
        }
        //스코어 변경
        // var index = url.findIndex(i => i == nowSong);
        // nowSong = url[index+1];
        //
        // setTimeout(() => {
        //   player.loadVideoById({
        //     'videoId': url[index+1],
        //     'startSeconds': stArr[index+1],
        //     'endSeconds': parseInt(stArr[index+1]) + parseInt(timeLimit)
        //   });
        // }, 4000); //남은 엔드타임 전부
        // timeLimit = "<%= @room.limitTime %>";
        // //다음곡 넘기기
        // messages.appendChild(document.createTextNode(`${data.nick}님 정답입니다!`));
        // messages.appendChild(document.createElement("br"));
        // setTimeout(() => {
        //   messages.appendChild(document.createTextNode(`[시스템메시지] : 3초 뒤에 시작됩니다.`));
        //   messages.appendChild(document.createElement("br"));
        //   if(move.scrollHeight > 0) {
        //     move.scrollTop = move.scrollHeight;
        //   }//자동스크롤
        // }, 1000);
        // setTimeout(() => {
        //   messages.appendChild(document.createTextNode(`[시스템메시지] : 2초 뒤에 시작됩니다.`));
        //   messages.appendChild(document.createElement("br"));
        //   if(move.scrollHeight > 0) {
        //     move.scrollTop = move.scrollHeight;
        //   }//자동스크롤
        // }, 2000);
        // setTimeout(() => {
        //   messages.appendChild(document.createTextNode(`[시스템메시지] : 1초 뒤에 시작됩니다.`));
        //   messages.appendChild(document.createElement("br"));
        //   if(move.scrollHeight > 0) {
        //     move.scrollTop = move.scrollHeight;
        //   }//자동스크롤
        // }, 3000);
        // if(move.scrollHeight > 0) {
        //   move.scrollTop = move.scrollHeight;
        // }//자동스크롤
      }
      //시스템메시지
    });
    //채팅 오갈때마다 검사
    socket.on('answer', (data) => {
      url = data.url;
      nowSong = data.url[0];
      stArr = data.startTime;
      keyword = data.keyword;
      answer = data.answer;
    });
    //시작할 시 문제정보 받음
</script>
